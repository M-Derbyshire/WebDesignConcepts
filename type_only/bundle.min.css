/* Define fonts */
@font-face {
  font-family: futura;
  src: url(fonts/unicode.futurab.ttf);
}
@font-face {
  font-family: futuraHeavy;
  src: url(fonts/Futura_Heavy.ttf);
}
@font-face {
  font-family: futuraBook;
  src: url(fonts/Futura_Book.ttf);
}
@font-face {
  font-family: courierPrime;
  src: url(fonts/Courier_Prime.ttf);
}
/* Add type styling */
body, footer, a {
  font-family: futuraBook;
}

h1 {
  font-family: futura;
}

h2, h3, h4, h5, h6 {
  font-family: futuraHeavy;
}

form h2 {
  text-decoration-line: underline;
}

a {
  color: black;
}

a:hover {
  color: #888;
}

ul {
  padding-left: 1.5em;
  padding-top: 0;
}

li {
  list-style-type: none;
  padding: 0.25em 0;
}

/* Replacement for the list marker */
/* Not using ::marker as it isn't well supported */
li::before {
  content: ">";
  font-weight: bold;
  padding-right: 0.5em;
}

/* Replace the list marker again for the nested lists */
li li::before {
  content: "-";
}

/* 
	Add square brackets around the input textboxes, to add a font-based shape to them, 
	and take away the default borders.

	The .textInputWrapper is used because before/after psuedo-elements will not display
	on text inputs
*/
.textInputWrapper {
  display: inline-block;
}

.textInputWrapper::before {
  content: "[";
  display: inline-block;
}

.textInputWrapper::after {
  content: "]";
  display: inline-block;
}

.textInputWrapper::before, .textInputWrapper::after {
  font-family: courierPrime;
  font-weight: bold;
  font-size: large;
}

input[type=text], input[type=text]:focus {
  border-width: 0;
  outline: none;
  font-family: courierPrime;
}

.inputArea label {
  font-weight: bold;
}

/* 
	Remove the border around text area, and add a left/right to the text area 
	in type. Unfortunately, the left/right are coupled to the text areas rows value, 
	however this can be decoupled with JS in the future
*/
textarea {
  border-width: 0;
  font-family: courierPrime;
  resize: none;
}

textarea:focus {
  outline: none;
}

.textareaWrapper {
  font-weight: bold;
  display: inline-block;
}

.textareaWrapper:before, .textareaWrapper:after {
  content: "+\a\a\a\a\a\a\a\a\a+";
  white-space: pre;
  display: inline-block;
}

.textareaWrapper:after {
  /* Makes the right border look better, as the pipes stay on the outside of any other characters */
  text-align: right;
}

/* 
	Style the checkboxes (and some of the radio button styling to) by hiding them, then using a 
	psuedo-element in it's place for display.
*/
input[type=checkbox], input[type=radio] {
  visibility: hidden;
  font-family: courierPrime;
  font-weight: bold;
  cursor: pointer;
}

input[type=radio] {
  /* Without this, the radio button overlaps the label */
  margin-right: 1.5em;
}

/* 
	The 'x' within the checkbox will be grey when unchecked.
	To make this work (since preceding/proceeding punctuation is 
	included in ::first-letter), the 'x' is the first letter of ::before, 
	and then the display direction is reversed, so it shows last.
*/
input[type=checkbox]:not(:checked)::first-letter, input[type=radio]:not(:checked)::first-letter {
  color: #aaa;
}

input[type=checkbox]:not(:checked):hover::first-letter, input[type=radio]:not(:checked):hover::first-letter {
  color: #888;
}

input[type=checkbox]::before {
  content: "x ]";
}

input[type=checkbox]::after {
  content: "]";
  visibility: visible;
}

input[type=checkbox]::before, input[type=radio]::before {
  visibility: visible;
  /* Reverse the text */
  direction: rtl;
  unicode-bidi: bidi-override;
  /* 
  	We need the space character, as any proceeding punctuation (']') would be included in ::first-letter.
  	However, we then remove the gap made by that space character, so only the x gets the ::first-letter 
  	styling.
  */
  white-space: pre;
  word-spacing: -0.65em;
}

/* 
	The rest of the radio button styling. See the checkbox styling above, as this works in the same way, 
	and some of that styling is shared with the radio buttons
*/
input[type=radio]:not(:checked)::before {
  content: "o )";
}

input[type=radio]:checked::before {
  content: "+ )";
}

input[type=radio]::after {
  content: ")";
  visibility: visible;
}

.radioButtonSelection h4 {
  margin-bottom: 0.5em;
}

/* 
	Styling the submit button
*/
button[type=submit] {
  font-family: futuraBook;
  font-weight: bolder;
  font-size: 1em;
  border-width: 0;
  outline: none;
  background-color: unset;
}

button[type=submit]:hover {
  text-decoration: underline;
  cursor: pointer;
}

button[type=submit]:active {
  font-weight: normal;
}

button[type=submit]::before {
  content: "[ ";
}

button[type=submit]::after {
  content: " ]";
}

/* Some smaller screen corrections */
@media (max-width: 650px) {
  .checkboxArea, .radioButtonSelection {
    font-size: 1.5em;
  }

  input[type=radio], input[type=checkbox] {
    font-size: 1em;
    /* These are needed to vertically align the box with the label */
    display: inline-block;
    vertical-align: top;
  }

  button[type=submit] {
    font-size: 1.5em;
  }
}
@media (max-width: 325px) {
  /* 
  	On Galaxy Fold, the md-developer.uk label was 
  	on a new line to the radio button, due to the size 
  	of the text. Therefore, make it smaller.
  */
  .radioButtonSelection {
    font-size: 1.25em;
  }
}
footer {
  margin: 10vh 10vw 5vh 10vw;
  text-align: center;
}

.footerText {
  font-weight: bold;
  font-size: small;
}

footer a {
  display: inline-block;
  margin: 0.5em;
}

/* Heading */
header {
  min-height: 20vh;
  padding: 30vh 2em 50vh 2em;
}

/* Section elements */
#informationArea {
  margin-left: 5vw;
  width: 70vw;
}

section {
  margin-bottom: 10vh;
}

/* Forms */
form {
  margin: 25vh 5vw 0 5vw;
}

.inputArea {
  margin: 2em 0;
}

.textareaWrapper {
  width: 70vw;
}

textarea {
  width: 60vw;
  max-width: 500px;
}

/* Smaller screen adjustments */
@media (max-width: 650px) {
  header {
    padding-left: 1em;
    padding-right: 2em;
  }

  #informationArea {
    margin-right: 5vw;
    width: 85vw;
  }

  textarea {
    width: 50vw;
  }

  .textareaWrapper {
    width: 65vw;
  }

  input[type=radio], .radioButtonSelection label {
    /* Give a bit more space between all the radio buttons, for easier selection */
    margin-top: 0.5em;
    display: inline-block;
  }
}

/*# sourceMappingURL=bundle.min.css.map */
